// src/services/geminiService.js

// Gemini AI API integration
// You need to provide your API key in the .env file as VITE_GEMINI_API_KEY

// API key is included directly in the code for development purposes
// In production, this should be moved to environment variables
let API_KEY = 'AIzaSyDJC5a882ruaJlvSRZL5zLFqbvZUQRQUcY';
const API_URL = 'https://generativelanguage.googleapis.com/v1beta/models/gemini-pro:generateContent';

// Function to set the API key programmatically
export function setApiKey(key) {
  if (key && key.trim() !== '') {
    API_KEY = key.trim();
    console.log('Gemini API key has been set');
    return true;
  }
  return false;
}

/**
 * Generate content using Gemini AI
 * @param {string} prompt - The prompt to send to Gemini
 * @returns {Promise<string>} - The generated content
 */
export async function generateContent(prompt) {
  // Check if API key is available
  if (!API_KEY || API_KEY === '') {
    console.warn('No Gemini API key provided. Using fallback content.');
    return getFallbackContent(prompt);
  }
  
  try {
    const response = await fetch(`${API_URL}?key=${API_KEY}`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        contents: [
          {
            parts: [
              {
                text: prompt,
              },
            ],
          },
        ],
      }),
    });

    if (!response.ok) {
      const errorData = await response.json().catch(() => ({}));
      console.error('Gemini API error:', errorData);
      throw new Error(`API request failed with status ${response.status}: ${errorData.error?.message || 'Unknown error'}`);
    }

    const data = await response.json();
    if (!data.candidates || data.candidates.length === 0) {
      throw new Error('No content generated by Gemini API');
    }
    
    return data.candidates[0].content.parts[0].text;
  } catch (error) {
    console.error('Error generating content with Gemini:', error);
    return getFallbackContent(prompt);
  }
}

// Helper function to get fallback content based on prompt type
function getFallbackContent(prompt) {
  if (prompt.includes('resume summary') || prompt.includes('professional summary')) {
    return getFallbackSummary();
  } else if (prompt.includes('bullet points') || prompt.includes('achievement')) {
    return getFallbackWorkPoints().join('\n');
  } else if (prompt.includes('cover letter')) {
    return getFallbackCoverLetter();
  } else {
    return 'AI-generated content is not available at this time. Please try again later or enter your content manually.';
  }
}

/**
 * Generate a resume summary based on work experience and skills
 * @param {Object} resumeData - The resume data
 * @returns {Promise<string>} - The generated summary
 */
export async function generateResumeSummary(resumeData) {
  const { personalInfo, workExperience, skills } = resumeData;
  
  // Extract relevant information for the prompt
  const title = personalInfo.title || 'Professional';
  const companies = workExperience
    .filter(exp => exp.company)
    .map(exp => `${exp.position} at ${exp.company}`)
    .join(', ');
  
  const allSkills = skills
    .flatMap(category => category.skills)
    .filter(skill => skill)
    .join(', ');

  // Create the prompt
  const prompt = `
    Write a professional resume summary for a ${title} with experience as ${companies || 'a professional'}.
    Skills include: ${allSkills || 'various professional skills'}.
    Keep it concise (3-4 sentences), professional, and highlight key strengths.
  `;

  return generateContent(prompt);
}

/**
 * Generate work experience bullet points
 * @param {Object} experience - The work experience data
 * @returns {Promise<string[]>} - Array of generated bullet points
 */
export async function generateWorkExperiencePoints(experience) {
  const { position, company, description } = experience;
  
  // Create the prompt
  const prompt = `
    Generate 3-5 achievement-oriented bullet points for a ${position || 'professional'} role at ${company || 'a company'}.
    Description: ${description || 'Responsible for various tasks and projects'}.
    Format each bullet point to start with a strong action verb and include measurable achievements where possible.
    Return ONLY the bullet points, one per line, without any numbering or additional text.
  `;

  const response = await generateContent(prompt);
  // Split the response into bullet points
  return response.split('\n').filter(line => line.trim() !== '');
}

/**
 * Generate a cover letter based on resume data and job description
 * @param {Object} resumeData - The resume data
 * @param {string} jobDescription - The job description
 * @param {string} companyName - The company name
 * @returns {Promise<string>} - The generated cover letter
 */
export async function generateCoverLetter(resumeData, jobDescription, companyName) {
  const { personalInfo, workExperience, skills } = resumeData;
  
  // Extract relevant information for the prompt
  const name = `${personalInfo.firstName} ${personalInfo.lastName}`.trim() || 'Applicant';
  const title = personalInfo.title || 'Professional';
  const recentExperience = workExperience[0] || {};
  
  const allSkills = skills
    .flatMap(category => category.skills)
    .filter(skill => skill)
    .join(', ');

  // Create the prompt
  const prompt = `
    Write a professional cover letter for ${name}, a ${title} applying to ${companyName || 'a company'}.
    
    Recent experience: ${recentExperience.position || 'Professional'} at ${recentExperience.company || 'previous company'}.
    Skills include: ${allSkills || 'various professional skills'}.
    
    Job description: ${jobDescription || 'A professional role requiring industry experience and relevant skills'}.
    
    The cover letter should be 3-4 paragraphs, professional in tone, and highlight how the candidate's experience and skills match the job requirements.
    Include a strong opening, relevant experience and skills in the middle paragraphs, and a call to action in the closing.
  `;

  return generateContent(prompt);
}

// Fallback functions that return placeholder content when API is not available
export function getFallbackSummary() {
  return "Dedicated professional with experience in developing innovative solutions and driving project success. Skilled in collaboration, problem-solving, and delivering high-quality results. Seeking to leverage technical expertise and leadership abilities to contribute to organizational growth and success.";
}

export function getFallbackWorkPoints() {
  return [
    "Led cross-functional team projects, resulting in 20% improvement in process efficiency",
    "Developed and implemented strategic initiatives that increased department productivity by 15%",
    "Collaborated with stakeholders to identify requirements and deliver solutions that exceeded expectations",
    "Managed multiple high-priority tasks simultaneously while maintaining attention to detail and quality"
  ];
}

export function getFallbackCoverLetter(companyName = "the company") {
  return `Dear Hiring Manager,

I am writing to express my interest in the position at ${companyName}. With my background in the industry and relevant skills, I believe I would be a valuable addition to your team.

Throughout my career, I have developed expertise in delivering high-quality work, collaborating effectively with cross-functional teams, and adapting quickly to new challenges. My experience has equipped me with the skills necessary to excel in this role and contribute to your organization's success.

I am particularly drawn to ${companyName} because of its reputation for innovation and commitment to excellence. I am confident that my skills and experience align well with the requirements of this position, and I am excited about the opportunity to contribute to your team.

Thank you for considering my application. I look forward to the possibility of discussing how my background and skills would benefit ${companyName}.

Sincerely,
[Your Name]`;
}
